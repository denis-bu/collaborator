/*
* App messaging API.
*
* Note. Sequence is some unique (within conversation) number assigned to each message. It determines
* order of messages in conversation. I.e. later messages have grater sequence number.
*
* MessageFetcher - encapsulates interaction with messaging service for a given conversation.
* Params:
*   url - default url for conversation.
*   onError - common callback for errors handling. By default use flash_error to popup error text.
* Methods:
*   fetchDefault - retrieve default message scope (messages for today).
*   fetchLatest - retrieve messages that have been posted after latest fetched message in conversation.
*   fetchBackward - retrieve messages history from a given sequence. Number of messages is always limited.
*   fetchForward - not implemented. Intention: if some full text search was made - ability to navigate forward.
* */
function MessageFetcher(url, onError) {
  this.default_url = url;
  var defaultOnError = function(error_text) {
    flash_error('Error while fetching messages. Error text:' + error_text);
  };
  this.onError = onError || defaultOnError;
}

MessageFetcher.PARAM_MODE = '<%= MessagesFetcher::PARAM_NAME_MODE %>';
MessageFetcher.PARAM_SEQ = '<%= MessagesFetcher::PARAM_NAME_SEQ %>';
MessageFetcher.PARAM_LIMIT = '<%= MessagesFetcher::PARAM_NAME_LIMIT %>';

MessageFetcher.MODE_LATEST = '<%= MessagesFetcher::MODE_LATEST %>';
MessageFetcher.MODE_BACKWARD = '<%= MessagesFetcher::MODE_HISTORY %>';

MessageFetcher.LIMITS = [<%= MessagesFetcher::LIMITS.join(', ') %>];

MessageFetcher.prototype.fetchDefault = function(callback) {
  this.internalFetch(callback, {});
};

MessageFetcher.prototype.fetchLatest = function(callback, sequence) {
  var data = {};
  data[MessageFetcher.PARAM_MODE] = MessageFetcher.MODE_LATEST;
  data[MessageFetcher.PARAM_SEQ] = sequence;
  this.internalFetch(callback, data);
};

MessageFetcher.prototype.fetchBackward = function(callback, sequence, limit) {
  var data = {};
  data[MessageFetcher.PARAM_MODE] = MessageFetcher.MODE_BACKWARD;
  data[MessageFetcher.PARAM_SEQ] = sequence;
  // TODO: handle correct limits.
  data[MessageFetcher.PARAM_LIMIT] = limit;
  this.internalFetch(callback, data);
};

MessageFetcher.prototype.fetchForward = function(callback, sequence, limit) {
  // TODO: implement.
};

MessageFetcher.prototype.internalFetch = function(callback, data) {
  var that = this;
  jQuery.ajax({
    url: this.default_url,
    data: data,
    success: function(data, status, xhr) { that.onFetchSuccess(callback, data, status, xhr); },
    error: function(xhr, status, error) { that.onFetchError(xhr, status, error); }
  });
};

MessageFetcher.prototype.onFetchSuccess = function(callback, data, status, xhr) {
  // Here data is array of messages.
  callback(data);
};

MessageFetcher.prototype.onFetchError = function(xhr, status, error) {
  this.onError(status + ':' + error)
};